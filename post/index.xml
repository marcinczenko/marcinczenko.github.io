<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on marcin.czenko</title>
    <link>https://marcinczenko.github.io/post/</link>
    <description>Recent content in Posts on marcin.czenko</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 18 Dec 2017 15:46:23 +0100</lastBuildDate>
    
	<atom:link href="https://marcinczenko.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Docker Swarm Networking (aka foundation for the private blockchain)</title>
      <link>https://marcinczenko.github.io/post/docker-swarm-networking/</link>
      <pubDate>Mon, 18 Dec 2017 15:46:23 +0100</pubDate>
      
      <guid>https://marcinczenko.github.io/post/docker-swarm-networking/</guid>
      <description>The most natural use of docker swarms is to deploy a load-balanced service with a number of replicas. A slightly less common use case is when you want to deploy a service in such a way that each container is being deployed to a separate host and being directly accessible from the outside (so without mesh routing). Can we still take advantage of a docker swarm in such a scenario?</description>
    </item>
    
    <item>
      <title>aurelia-redux</title>
      <link>https://marcinczenko.github.io/post/aurelia-redux/</link>
      <pubDate>Thu, 23 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://marcinczenko.github.io/post/aurelia-redux/</guid>
      <description>This is a demo project showing how to integrate redux and rxjs with aurelia in a react-redux way.
 The complete source code can be find at https://github.com/marcinczenko/aurelia-redux.
 How to run After cloning run:
$ au run --watch  Introduction One of the patterns that helps keeping our apps clear and maintainable as they grow is the Data-Down, Actions-Up pattern. It puts clear constraints on the data flow between parent and child components: the data that a child component needs to render its view (or to do its job in general) are provided by its parent and the only way to change the data is via so called actions.</description>
    </item>
    
    <item>
      <title>UIDatePicker does not respond to the first valueChanged event</title>
      <link>https://marcinczenko.github.io/post/uidatepicker-does-not-respond-to-first-valuechanged-event/</link>
      <pubDate>Wed, 25 Jan 2017 18:11:28 +0100</pubDate>
      
      <guid>https://marcinczenko.github.io/post/uidatepicker-does-not-respond-to-first-valuechanged-event/</guid>
      <description>Time ago I found another problem that somehow resembles this one. It was about presenting a view controller from within the tableView:didSelectRowAtIndexPath: and the problem was that it was taking lots of time for the new controller to actually show up. One of the workarounds turned out to be using dispatch_async on the main queue. The same worked for me in this case.
In my viewDidLoad, I asynchronously dispatched the picker setup code on the main queue and, in my case, it started to respond to the valueChanged event even on the first pick:</description>
    </item>
    
    <item>
      <title>presentViewController from didSelectRowAtIndexPath very slow</title>
      <link>https://marcinczenko.github.io/post/presentviewcontroller-from-didselectrowatindexpath-very-slow/</link>
      <pubDate>Tue, 26 Jul 2016 14:47:01 +0200</pubDate>
      
      <guid>https://marcinczenko.github.io/post/presentviewcontroller-from-didselectrowatindexpath-very-slow/</guid>
      <description>And intersting behaviour can be observed when presenting a view controller from tableView:didSelectRowAtIndexPath:. It may take long seconds before the new view will be presented. This problem does not seem to be new and is already reported on openradar for iOS8.1, but comments and my own tests indicate that the problem persists even in iOS9.3.3 (build 13G34).
Two workarounds are to be known:
 Wrap the presenting of a controller in a dispatch_async call on the main queue.</description>
    </item>
    
    <item>
      <title>welcome</title>
      <link>https://marcinczenko.github.io/post/welcome/</link>
      <pubDate>Sat, 16 Jul 2016 17:48:05 +0200</pubDate>
      
      <guid>https://marcinczenko.github.io/post/welcome/</guid>
      <description>I used to host my blog on Tumblr. Unfortunately, Tumblr does not make the editting work easy and I had countless moments of frustration when working with Markdown. So this is why I decided for ultimate simplicity and I went for statically generated blog site hosted at github, which seems to be one of the best places in this world to host one&amp;rsquo;s engineering blog.
Over next days (weeks?) my old blog from http://blog.</description>
    </item>
    
    <item>
      <title>distributed persistance with swift and coredata</title>
      <link>https://marcinczenko.github.io/post/distributed-persistance-with-swift-and-coredata/</link>
      <pubDate>Thu, 30 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://marcinczenko.github.io/post/distributed-persistance-with-swift-and-coredata/</guid>
      <description>Component-based architectures give us high level of isolation and independence of the underlying components, but at the same time exibits potential risk of duplication. How would a component-based architecture work for iOS apps, especially when persistance is the key. Let&amp;rsquo;s experiment&amp;hellip;
Let me create a framerwork in which I will have seprate components. I want my components to be possibly independent from each other, but at the same time I want to limit duplication.</description>
    </item>
    
    <item>
      <title>around type erasure in swift</title>
      <link>https://marcinczenko.github.io/post/around-type-erasure-in-swift/</link>
      <pubDate>Sat, 25 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://marcinczenko.github.io/post/around-type-erasure-in-swift/</guid>
      <description>WWDC 2016 being already a past event (with lots of exiting material to watch), I&amp;rsquo;ve finally found more time to look more carefully to one of the most important programming paradims promoted in Swift: Protocol-Oriented Pragramming. Protocol-Oriented Programming in Swift was a great talk at WWDC 2015, where the concept was beautfully explained and demonstrated by Dave Abrahams. During this year&amp;rsquo;s WWDC 2016 we have a follow-up: Protocol and Value Oriented Programming in UIKit Apps, which immediatelly invites us to watch again another great session from WWDC 2015: Building Better Apps with Value Types in Swift.</description>
    </item>
    
    <item>
      <title>string conversions in swift</title>
      <link>https://marcinczenko.github.io/post/string-conversions-in-swift/</link>
      <pubDate>Fri, 20 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://marcinczenko.github.io/post/string-conversions-in-swift/</guid>
      <description>Say you have your own custom class:
class MyClass { let counter: Int init(withCounter: Int) { self.counter = withCounter } }  Now, you want it to be convertible to String. One way of doing it is to create an extension to the String class itself like this:
extension String { init(_ myClass: MyClass) { self = &amp;quot;{ counter: \(myClass.counter) }&amp;quot; } }  This will let you do:
let str = String(MyClass(withCounter:25)) // str is &amp;quot;{ counter: 25 }&amp;quot;  This may seem to be sufficient in many cases, but it does not seem to be truly the Swift way.</description>
    </item>
    
    <item>
      <title>using swift frameworks from objective-c target</title>
      <link>https://marcinczenko.github.io/post/using-swift-frameworks-from-objective-c-target/</link>
      <pubDate>Sun, 17 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://marcinczenko.github.io/post/using-swift-frameworks-from-objective-c-target/</guid>
      <description>The code in this post was tested with Xcode Version 7.2 (7C68).
The accompanying source code can be found at github.com/marcinczenko/UsingSwiftFrameworksFromObjectiveC
 When working with legacy iOS products it may happens that you need to integrate with main application target that contains only Objective-C code. You want to take advantage of Swift but you want this nicely separated from the old legacy code. Creating a framework that will contain your Swift code is the answer.</description>
    </item>
    
    <item>
      <title>module exports vs exports in nodejs</title>
      <link>https://marcinczenko.github.io/post/module-exports-vs-exports-in-node-js/</link>
      <pubDate>Thu, 19 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://marcinczenko.github.io/post/module-exports-vs-exports-in-node-js/</guid>
      <description>This post is a summary of the differences between module.exports and exports in Node.js described in the following note: Node.js Module â€“ exports vs module.exports.
The article comes from 2011 but then updated in 2014. You may want to take a look at the comments, they add valuable insights. I especially value the one from Adam Ahmed, and I decided to include it below for my own convenience.</description>
    </item>
    
  </channel>
</rss>